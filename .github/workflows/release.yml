name: Build and Create Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags that start with 'v' (like v1.0.0)

jobs:
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            artifact_name: VisualTimer-Windows
            asset_name: VisualTimer-Windows.zip
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            artifact_name: VisualTimer-Linux
            asset_name: VisualTimer-Linux.tar.gz
    
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

    - name: Install Qt on Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y qtbase5-dev qt5-qmake

    - name: Set up MSVC
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Install Qt on Windows
      if: runner.os == 'Windows'
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        tools: 'tools_openssl_x64'  # Include OpenSSL
        cache: true                 # Cache the installation to speed up future runs
        setup-python: false         # We don't need Python for this

    - name: Configure CMake for Linux
      if: runner.os == 'Linux'
      shell: bash
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}
        
    - name: Configure CMake for Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $build_dir = "${{ steps.strings.outputs.build-output-dir }}"
        $workspace = "${{ github.workspace }}"
        
        # Ensure we're using proper Windows paths
        $build_dir = $build_dir -replace '/', '\'
        $workspace = $workspace -replace '/', '\'
        
        cmake -B $build_dir `
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
        -DCMAKE_BUILD_TYPE=Release `
        -S $workspace

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    - name: Package for Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Create a directory for the final package
        $release_dir = "${{ github.workspace }}/release"
        New-Item -Path $release_dir -ItemType Directory -Force
        
        # Copy the executable
        Copy-Item "${{ steps.strings.outputs.build-output-dir }}/Release/VisualTimer.exe" -Destination $release_dir
        
        # Debug Qt installation 
        Write-Host "Qt Directory Check:"
        Get-ChildItem env:Qt*
        
        # Use windeployqt to handle dependencies automatically
        Write-Host "Looking for windeployqt..."
        $windeployqt_paths = @(
          "C:\Qt\5.15.2\msvc2019_64\bin\windeployqt.exe",
          "D:\a\VisualTimer\Qt\5.15.2\msvc2019_64\bin\windeployqt.exe"
        )
        
        foreach ($path in $windeployqt_paths) {
          if (Test-Path $path) {
            Write-Host "Found windeployqt at $path"
            # Use windeployqt to gather all dependencies
            & $path --no-translations --no-system-d3d-compiler --no-opengl-sw "$release_dir\VisualTimer.exe"
            if ($LASTEXITCODE -eq 0) {
              Write-Host "windeployqt completed successfully"
              break
            } else {
              Write-Host "windeployqt failed with exit code $LASTEXITCODE"
            }
          }
        }
        
        # Create ZIP archive
        Write-Host "Creating ZIP archive from $release_dir"
        Get-ChildItem -Path $release_dir -Recurse | Select-Object FullName
        
        # Make sure paths use Windows separators
        $zip_path = "${{ github.workspace }}\${{ matrix.artifact_name }}.zip"
        $zip_path = $zip_path -replace "/", "\"
        
        # Use PowerShell's Compress-Archive
        if (Test-Path -Path $release_dir -PathType Container) {
          Compress-Archive -Path "$release_dir\*" -DestinationPath $zip_path -Force
          Write-Host "Created archive at $zip_path"
        } else {
          Write-Error "Release directory not found at $release_dir"
        }

    - name: Package for Linux
      if: runner.os == 'Linux'
      shell: bash
      run: |
        # Create a directory for the final package
        mkdir -p release
        
        # Copy the executable
        cp ${{ steps.strings.outputs.build-output-dir }}/VisualTimer release/
        
        # Create a launcher script
        cat > release/run_visualtimer.sh << 'EOL'
        #!/bin/bash
        # Set up the correct library path
        export LD_LIBRARY_PATH="$(dirname "$0")${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
        # Run the application
        "$(dirname "$0")/VisualTimer" "$@"
        EOL
        
        chmod +x release/run_visualtimer.sh
        
        # Create tarball
        tar -czvf ${{ matrix.artifact_name }}.tar.gz -C release .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ github.workspace }}/${{ matrix.asset_name }}
        if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: List downloaded artifacts
        run: |
          find . -type f -name "*.zip" -o -name "*.tar.gz"
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/VisualTimer-Windows.zip
            ./**/VisualTimer-Linux.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
