name: Build and Create Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags that start with 'v' (like v1.0.0)

jobs:
  build:
    # Reuse the exact same build configuration from the multi-platform workflow
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            artifact_name: VisualTimer-Windows
            asset_name: VisualTimer-Windows.zip
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            artifact_name: VisualTimer-Linux
            asset_name: VisualTimer-Linux.tar.gz
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            artifact_name: VisualTimer-Linux-Clang
            asset_name: VisualTimer-Linux-Clang.tar.gz
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
    
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

    # Install Qt on Ubuntu - Same as in multi-platform workflow
    - name: Install Qt on Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y qtbase5-dev qt5-qmake

    # Set up MSVC on Windows - Same as in multi-platform workflow
    - name: Set up MSVC
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      
    # Install Qt on Windows - Same as in multi-platform workflow
    - name: Install Qt on Windows
      if: runner.os == 'Windows'
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'

    # Configure CMake - Same as in multi-platform workflow
    - name: Configure CMake for Linux
      if: runner.os == 'Linux'
      shell: bash
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        
    - name: Configure CMake for Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $build_dir = "${{ steps.strings.outputs.build-output-dir }}"
        $workspace = "${{ github.workspace }}"
        
        # Ensure we're using proper Windows paths
        $build_dir = $build_dir -replace '/', '\'
        $workspace = $workspace -replace '/', '\'
        
        cmake -B $build_dir `
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
        -S $workspace

    # Build - Same as in multi-platform workflow
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # Package the application for distribution
    - name: Package for Windows
      if: runner.os == 'Windows' && matrix.c_compiler == 'cl'
      shell: powershell
      run: |
        # Create a directory for the package
        $package_dir = "package"
        New-Item -Path $package_dir -ItemType Directory -Force
        
        # Copy the executable
        Copy-Item "${{ steps.strings.outputs.build-output-dir }}/Release/VisualTimer.exe" -Destination $package_dir/
        
        # Use windeployqt from Qt installation
        $qt_bin = Get-ChildItem env:QTDIR | Select-Object -ExpandProperty Value
        if ($qt_bin) {
          $qt_bin = "$qt_bin\bin"
          $windeployqt = "$qt_bin\windeployqt.exe"
          if (Test-Path $windeployqt) {
            & $windeployqt --no-translations --release $package_dir/VisualTimer.exe
          } else {
            Write-Host "windeployqt.exe not found, packaging only the executable"
          }
        }
        
        # Create the ZIP file
        Compress-Archive -Path $package_dir\* -DestinationPath "${{ matrix.artifact_name }}.zip" -Force

    - name: Package for Linux
      if: runner.os == 'Linux'
      shell: bash
      run: |
        # Create a directory for the package
        mkdir -p package
        
        # Copy the executable
        cp ${{ steps.strings.outputs.build-output-dir }}/VisualTimer package/
        
        # Create a launcher script
        cat > package/run_visualtimer.sh << 'EOL'
        #!/bin/bash
        # Set up the correct library path
        export LD_LIBRARY_PATH="$(dirname "$0")${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
        # Run the application
        "$(dirname "$0")/VisualTimer" "$@"
        EOL
        chmod +x package/run_visualtimer.sh
        
        # Create tarball 
        tar -czf ${{ matrix.artifact_name }}.tar.gz -C package .

    # Upload artifacts for the release
    - name: Upload Artifacts for Release
      if: |
        (runner.os == 'Windows' && matrix.c_compiler == 'cl') || 
        (runner.os == 'Linux' && matrix.c_compiler == 'gcc')
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ github.workspace }}/${{ matrix.asset_name }}
        retention-days: 1
        if-no-files-found: error

  # Create a GitHub release with the artifacts
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
      
      - name: Display Downloaded Files
        run: find . -type f
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./VisualTimer-Windows/VisualTimer-Windows.zip
            ./VisualTimer-Linux/VisualTimer-Linux.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
